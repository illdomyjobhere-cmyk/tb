# ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥)

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    try:
        if os.path.exists('users.json'):
            with open('users.json', 'r', encoding='utf-8') as f:
                users_data = json.load(f)
                logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return users_data
        return {}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json: {e}")
        return {}

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
def save_users(users_data):
    try:
        with open('users.json', 'w', encoding='utf-8') as f:
            json.dump(users_data, f, indent=4, ensure_ascii=False)
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def registration_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∏ callback-–∏
    if update.message:
        text = update.message.text
        gender_map = {
            "–Ø - –ø–∞—Ä–µ–Ω—å": "male",
            "–Ø - –¥–µ–≤—É—à–∫–∞": "female"
        }
        if text not in gender_map:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞")
            return GENDER
        gender = gender_map[text]
        user_id = str(update.message.from_user.id)
    else:
        query = update.callback_query
        await query.answer()
        gender = query.data
        user_id = str(query.from_user.id)
        await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {'–ø–∞—Ä–µ–Ω—å' if gender == 'male' else '–¥–µ–≤—É—à–∫–∞'}")

    users[user_id] = {'gender': gender}
    save_users(users)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã (—Ç–µ–ø–µ—Ä—å ReplyKeyboard)
    country_keyboard = [COUNTRIES[i:i+2] for i in range(0, len(COUNTRIES), 2)]
    await context.bot.send_message(
        user_id,
        "–®–∞–≥ 2: –í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(country_keyboard, resize_keyboard=True)
    return COUNTRY

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —É–ª—É—á—à–∞–µ–º –¥—Ä—É–≥–∏–µ —à–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...

# –í —Ñ—É–Ω–∫—Ü–∏–∏ start –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if context.user_data.get('in_registration'):
        await update.message.reply_text("–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")
        return ConversationHandler.END
        
    if user_id in users:
        # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ ...
    else:
        context.user_data['in_registration'] = True
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ReplyKeyboard –≤–º–µ—Å—Ç–æ Inline
        reply_keyboard = [["–Ø - –ø–∞—Ä–µ–Ω—å", "–Ø - –¥–µ–≤—É—à–∫–∞"]]
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–®–∞–≥ 1: –í–∞—à –ø–æ–ª",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, 
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return GENDER

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = str(update.message.from_user.id)
    if user_id in context.user_data:
        context.user_data.pop('in_registration', None)
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_keyboard)
    return ConversationHandler.END

# –í main() —É–ª—É—á—à–∞–µ–º ConversationHandler
def main() -> None:
    # ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥)
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            GENDER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, registration_gender),
                CallbackQueryHandler(registration_gender)
            ],
            COUNTRY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, registration_country),
                CallbackQueryHandler(registration_country)
            ],
            AGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, registration_age),
                CallbackQueryHandler(registration_age)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    )
    
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥)